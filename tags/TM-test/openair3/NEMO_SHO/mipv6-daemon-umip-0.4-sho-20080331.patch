diff -Nru mipv6-daemon-umip-0.4-nepl-mcoa/extras/mr_mcoa_sho_UMIP.conf mipv6-daemon-umip-0.4-nepl-mcoa-sho/extras/mr_mcoa_sho_UMIP.conf
--- mipv6-daemon-umip-0.4-nepl-mcoa/extras/mr_mcoa_sho_UMIP.conf	1970-01-01 01:00:00.000000000 +0100
+++ mipv6-daemon-umip-0.4-nepl-mcoa-sho/extras/mr_mcoa_sho_UMIP.conf	2008-03-31 17:06:27.000000000 +0200
@@ -0,0 +1,67 @@
+# This is an example of mip6d Mobile Node configuration file
+
+NodeConfig MN;
+
+## If set to > 0, will not detach from tty
+DebugLevel 10;
+
+## Support route optimization with other MNs
+DoRouteOptimizationCN disabled;
+
+## Use route optimization with CNs
+DoRouteOptimizationMN disabled;
+
+UseCnBuAck disabled;
+
+Interface "eth0" { 
+	Bid 100;
+	BidPriority 1;
+	Reliable false;
+	DefaultDelay 5000;
+}
+
+Interface "eth1" { 
+	Bid 200;
+	BidPriority 1;
+	Reliable true;
+	DefaultDelay 0;
+}
+
+MnRouterProbes 1;
+
+MnHomeLink "eth0" {
+	IsMobRtr enabled;
+	MnUseSHO enabled;
+#	MnUseSHO disabled;  
+	MnUseAdaptiveCombining enabled;
+#	MnUseAdaptiveCombining disabled;
+	HomeAgentAddress 2001:4::1;
+	HomeAddress 2001:4::4/64 (2001:4:0:2::/64);
+	RegMultipleCoA enabled;
+	IfMultipleCoA "eth0", "eth1";
+
+	#		proto	type	code	route opt.
+#	MnRoPolicy 	ICMP	129	0	enabled;
+#	MnRoPolicy 	ICMP	any	any	disabled;
+	#		proto	dst	src	route opt.
+#	MnRoPolicy 	TCP	80	any	enabled; 
+#	MnRoPolicy 	TCP	any	any	disabled; 
+}
+
+##
+## IPsec configuration
+##
+
+UseMnHaIPsec disabled;
+
+## Key Management Mobility Capability
+KeyMngMobCapability disabled;
+
+IPsecPolicySet {
+	HomeAgentAddress 3ffe:2620:6:1::1;
+	HomeAddress 3ffe:2620:6:1::1234/64;
+
+	IPsecPolicy HomeRegBinding UseESP;
+	IPsecPolicy MobPfxDisc UseESP;
+	IPsecPolicy TunnelMh UseESP;
+}
diff -Nru mipv6-daemon-umip-0.4-nepl-mcoa/include/netinet/ip6mh.h mipv6-daemon-umip-0.4-nepl-mcoa-sho/include/netinet/ip6mh.h
--- mipv6-daemon-umip-0.4-nepl-mcoa/include/netinet/ip6mh.h	2008-03-21 16:40:07.000000000 +0100
+++ mipv6-daemon-umip-0.4-nepl-mcoa-sho/include/netinet/ip6mh.h	2008-03-20 17:02:41.000000000 +0100
@@ -157,6 +157,25 @@
 	uint8_t ip6mobid_reserved;
 } __attribute__((packed));
 
+/* NEMO-SHO */
+struct ip6_mh_opt_fid {
+	uint8_t ip6fid_type;
+	uint8_t ip6fid_len;
+	uint8_t ip6fid_flags_high;
+	uint8_t ip6fid_flags_low;
+	uint8_t ip6fid_fid;
+	uint8_t ip6fid_action;
+	uint8_t ip6fid_status;
+	uint8_t ip6fid_pro_cls;
+} __attribute__((packed));
+
+struct ip6_mh_opt_fid_subopt{
+	uint8_t ip6fid_subopt_type;
+	uint8_t ip6fid_subopt_len;
+	uint8_t ip6fid_subopt_bid;
+} __attribute__((packed));	
+/* NEMO-SHO */
+
 /* Binding Unique Identifier sub-option flags */
 #if BYTE_ORDER == BIG_ENDIAN
 #define IP6_OPT_BID_BULK		0x80  /*  Bulk Registration */
@@ -187,6 +206,7 @@
 #define IP6_MHOPT_BAUTH		0x05	/* Binding Auth Data */
 #define IP6_MHOPT_MOB_NET_PRFX	0x06	/* Mobile Network Prefix */
 #define IP6_MHOPT_BID		0x07	/* Binding Unique Identifier */
+#define IP6_MHOPT_FID		0x08	/* Flow Identification */
 
 /*
  *    Status values accompanied with Mobility Binding Acknowledgement
diff -Nru mipv6-daemon-umip-0.4-nepl-mcoa/src/bul.c mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/bul.c
--- mipv6-daemon-umip-0.4-nepl-mcoa/src/bul.c	2008-03-21 16:40:07.000000000 +0100
+++ mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/bul.c	2008-03-20 16:55:16.000000000 +0100
@@ -71,6 +71,7 @@
 		bule->rules = 0;
 		bule->home_block = 0;
 		bule->mcoa_dereg = 1;
+		bule->fid        = 0; /* NEMO-SHO */
 		INIT_LIST_HEAD(&bule->tqe.list);
 		bule->seq = random();
 	}
diff -Nru mipv6-daemon-umip-0.4-nepl-mcoa/src/bul.h mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/bul.h
--- mipv6-daemon-umip-0.4-nepl-mcoa/src/bul.h	2008-03-21 16:40:07.000000000 +0100
+++ mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/bul.h	2008-03-20 16:54:49.000000000 +0100
@@ -43,6 +43,7 @@
 	uint16_t seq;			/* sequence number of the latest BU */
 	uint16_t flags;			/* BU send flags */
 	uint16_t bid;			/* MCoA: Binding Identifier */
+	uint8_t  fid;                   /* NEMO-SHO: Associated FID */
 	struct in6_addr last_coa;	/* Last good coa */      
 	struct timespec lastsent;
 	struct timespec lifetime;      	/* lifetime sent in this BU */
diff -Nru mipv6-daemon-umip-0.4-nepl-mcoa/src/cn.c mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/cn.c
--- mipv6-daemon-umip-0.4-nepl-mcoa/src/cn.c	2008-03-21 16:40:07.000000000 +0100
+++ mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/cn.c	2008-03-20 17:12:02.000000000 +0100
@@ -301,7 +301,7 @@
 		status = IP6_MH_BAS_ACCEPTED;
 	}
 	if (bu_flags & IP6_MH_BU_ACK)
-		mh_send_ba(&out, status, 0, seqno, &lft, 0, 0, key, iif);
+		mh_send_ba(&out, status, 0, seqno, &lft, 0, 0, NULL, key, iif); /* NEMO-SHO */
 	return;
 send_nack:
 	if (bce) {
diff -Nru mipv6-daemon-umip-0.4-nepl-mcoa/src/conf.c mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/conf.c
--- mipv6-daemon-umip-0.4-nepl-mcoa/src/conf.c	2008-03-21 16:40:07.000000000 +0100
+++ mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/conf.c	2008-03-21 15:29:32.000000000 +0100
@@ -404,4 +404,27 @@
 	}
 	return priority;
 }
+#if 1
+// NEMO-SHO
+/* 
+ * get_bid_from_ifindex - return the bid from the interface index
+ * @iif: the interface index
+ */ 
+uint16_t get_delay_from_bid(uint16_t bid)
+{
+	struct list_head *list;
+
+	list_for_each(list, &conf.net_ifaces) {
+		struct net_iface *nif;
+		nif = list_entry(list, struct net_iface, list);
+		if (nif->mn_if_bid == bid) {
+			if (is_if_mn(nif))
+				return nif->mn_if_delay;
+			return 0;
+		}
+	}
+
+	return 0;
+}
+#endif
 
diff -Nru mipv6-daemon-umip-0.4-nepl-mcoa/src/conf.h mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/conf.h
--- mipv6-daemon-umip-0.4-nepl-mcoa/src/conf.h	2008-03-21 16:40:07.000000000 +0100
+++ mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/conf.h	2008-03-21 15:27:52.000000000 +0100
@@ -45,6 +45,8 @@
 	char MnDiscardHaParamProb;
 	char SendMobPfxSols;
 	char OptimisticHandoff;
+	char MnUseSHO;
+	char UseAdaptiveCombining;
 
 	/* HA options */
 	char HaAcceptMobRtr;
@@ -70,6 +72,7 @@
 	uint16_t mn_if_bid;
 	uint8_t mn_if_bidprio;
 	int mn_if_reliable;
+	uint16_t mn_if_delay; /* NEMO-SHO option */
 };
 
 extern struct mip6_config conf;
@@ -127,6 +130,7 @@
 uint16_t get_bid_from_ifindex(int iif);
 uint8_t get_prio_from_bid(uint16_t bid);
 uint8_t get_highest_prio();
+uint16_t get_delay_from_bid(uint16_t bid);
 
 int yyparse(void);
 
diff -Nru mipv6-daemon-umip-0.4-nepl-mcoa/src/gram.y mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/gram.y
--- mipv6-daemon-umip-0.4-nepl-mcoa/src/gram.y	2008-03-21 16:40:07.000000000 +0100
+++ mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/gram.y	2008-03-21 15:49:44.000000000 +0100
@@ -54,7 +54,8 @@
 	.mn_if_preference = POL_MN_IF_DEF_PREFERENCE,
 	.mn_if_bid = POL_MN_IF_DEF_BID,
 	.mn_if_bidprio = POL_MN_IF_DEF_BID_PRIORITY,
-	.mn_if_reliable = POL_MN_IF_DEF_RELIABLE
+	.mn_if_reliable = POL_MN_IF_DEF_RELIABLE,
+	.mn_if_delay = POL_MN_IF_DEF_DELAY
 };
 	
 struct home_addr_info hai = {
@@ -196,8 +197,11 @@
 %token		BID
 %token		BIDPRIORITY
 %token		RELIABLE
+%token          DEFAULTDELAY
 %token		REGMULTIPLECOA
 %token		IFMULTIPLECOA
+%token		MNUSESHO
+%token		MNUSEAPC
 
 %token		INV_TOKEN
 
@@ -448,6 +452,20 @@
 			}
 			ni.mn_if_bidprio = $2;
 		}
+		| DEFAULTDELAY NUMBER ';'
+		{
+			if (ni.mn_if_preference) {
+				uerror("You cannot set Default Delay if "
+				       "MnIfPreference is set.");
+				return -1;
+			}		
+			if ($2 < 0 || $2 > 65535) {
+				uerror("DefDelay error "
+				       "(%d <= BidPriority <= %d)",0, 65535);
+				return -1;
+			}
+			ni.mn_if_delay = $2;
+		}
 		| RELIABLE BOOL ';'
 		{
 			ni.mn_if_reliable = $2;
@@ -543,6 +561,14 @@
 		{
 			hai.reg_mcoa = $2;
 		}
+		| MNUSESHO BOOL ';'
+		{
+			conf.MnUseSHO = $2;
+		}
+		| MNUSEAPC BOOL ';'
+		{
+			conf.UseAdaptiveCombining = $2;
+		}
 		| IFMULTIPLECOA iflist ';'
 		;
 
diff -Nru mipv6-daemon-umip-0.4-nepl-mcoa/src/ha.c mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/ha.c
--- mipv6-daemon-umip-0.4-nepl-mcoa/src/ha.c	2008-03-21 16:40:07.000000000 +0100
+++ mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/ha.c	2008-03-21 16:27:40.000000000 +0100
@@ -60,6 +60,17 @@
 #include "ndisc.h"
 #include "prefix.h"
 
+/* NEMO-SHO CONFIG */
+#define NEMO_SHO_LTOH // Enable in case of low speed to high speed 
+#ifdef NEMO_SHO_LTOH
+const static int NEMO_SHO_DEFAULT_DELAY1 = 0;    // msec
+const static int NEMO_SHO_DEFAULT_DELAY2 = 1000; // msec
+#else
+const static int NEMO_SHO_DEFAULT_DELAY1 = 0;    // msec
+const static int NEMO_SHO_DEFAULT_DELAY2 = 0;    // msec
+#endif
+/* NEMO-SHO CONFIG*/
+
 #define HA_DEBUG_LEVEL 1
 
 #if HA_DEBUG_LEVEL >= 1
@@ -1007,6 +1018,12 @@
 	struct home_tnl_ops_parm p;
 	struct ip6_mh_opt_bid *bid_opt;	
 
+	/* NEMO-SHO */
+	struct ip6_mh_opt_fid *fid_opt;
+	struct ip6_mh_opt_fid_subopt *fid_opt_subopt;
+	struct bcentry *bce_associated = NULL;
+	/* NEMO-SHO */
+
 	pthread_dbg("thread started");
 restart:	
 	home_ifindex = 0;
@@ -1035,6 +1052,10 @@
 		out.bind_coa = NULL;
 	out.local_coa = NULL;
 	bid_opt = NULL;
+	/* NEMO-SHO */
+	fid_opt = NULL;
+	fid_opt_subopt = NULL;
+	/* NEMO-SHO */
 
 	/* MCoA
 	 * We check if a BCE already exists for this HoA 
@@ -1322,6 +1343,85 @@
 		}
 		bcache_update_expire(bce);
 	}
+	/* NEMO-SHO */
+	/* check if there is FID option */
+	fid_opt = mh_opt(&arg->bu->ip6mhbu_hdr, 
+			 &arg->mh_opts, 
+			 IP6_MHOPT_FID);
+	/* check if there is BID sub-option */
+	if (fid_opt && (fid_opt->ip6fid_len > (sizeof(struct ip6_mh_opt_fid) - 2))){
+		fid_opt_subopt = (struct ip6_mh_opt_fid_subopt*)(fid_opt+1);
+		if (fid_opt_subopt->ip6fid_subopt_type == 1)
+			MDBG("FID: BID Reference sub-option\n");
+		else {
+			MDBG("FID: Unknown sub-option. FID is not processed\n");
+			fid_opt_subopt = NULL;
+		}
+	}
+	
+	if (fid_opt){
+		MDBG("FID option (FID=%d) action=%d, status=%d, pro=%d, cls=%d\n",
+		     fid_opt->ip6fid_fid, fid_opt->ip6fid_action, fid_opt->ip6fid_status,
+		     (fid_opt->ip6fid_pro_cls & 0xF0) >> 4,
+		     fid_opt->ip6fid_pro_cls & 0x0F);
+		uint8_t action = fid_opt->ip6fid_action;
+		switch ( fid_opt->ip6fid_pro_cls & 0xF0){
+		case FBIND_ADD_FLOW:
+			MDBG("FID: ADD FLOW\n");
+			if ( (action == FBIND_ACTION_NCAST) ||
+			     (action == FBIND_ACTION_NCAST_COMBINE )||
+			     (action == FBIND_ACTION_NCAST_COMBINE_ADAP) ){
+				int nemo_sho_flag = SHO_BICAST;
+				if (conf.debug_level > 0)
+					nemo_sho_flag |= SHO_DEBUG;
+				if (action == FBIND_ACTION_NCAST_COMBINE)
+					nemo_sho_flag |= SHO_COMBINING;
+				else if (action == FBIND_ACTION_NCAST_COMBINE_ADAP)
+					nemo_sho_flag |= (SHO_COMBINING|SHO_ADAPTIVE);
+
+				assert(fid_opt_subopt);
+				MDBG("FID: ACTION NCAST (SHO_FLAG=%x)\n", nemo_sho_flag);
+				// look up another bcache assigned to bid
+				bce_associated = bcache_get(out.src, out.dst, 
+							    fid_opt_subopt->ip6fid_subopt_bid);
+				if (bce_associated){
+					if (dtunnel_mod_type(bce->tunnel,
+							     out.src, 
+							     out.bind_coa, 
+							     &bce_associated->coa,
+							     0, // dummy
+							     nemo_sho_flag,
+							     1, /* HA to MN/MR */
+							     NEMO_SHO_DEFAULT_DELAY1,
+							     NEMO_SHO_DEFAULT_DELAY2
+							     )< 0 ){
+					}
+					bcache_release_entry(bce_associated);
+				}
+				else 
+					MDBG("FID: no other binding cache entry\n");
+			}
+			else 
+				MDBG("FID: Unsupported Action\n");
+			break;
+		case FBIND_REMOVE_FLOW:
+			MDBG("FID: REMOVE FLOW\n");
+			dtunnel_mod_type(bce->tunnel,
+					 out.src, 
+					 out.bind_coa, 
+					 0,
+					 0, // dummy
+					 0, // stop bicasting/combining
+					 1  /* HA to MN/MR */,
+					 0,
+					 0);
+			break;
+		default:
+			break;
+		}
+	}
+	/* NEMO-SHO */
+
 	/* bce is always valid here */
 	bcache_release_entry(bce);
 	if (!tsisset(lft))
@@ -1356,7 +1456,7 @@
 
 	if (!(arg->flags & HA_BU_F_SKIP_BA))
 		mh_send_ba(&out, status, ba_flags, seqno, &lft,
-			   bid, bid_priority, NULL, iif);
+			   bid, bid_priority, fid_opt, NULL, iif); /* NEMO-SHO */
 	/* MCoA: Start MPA only if no entries yet for this HoA */	
 	if (!bce_exists && new && tsisset(lft))
 		mpd_start_mpa(&bce->our_addr, &bce->peer_addr);
diff -Nru mipv6-daemon-umip-0.4-nepl-mcoa/src/mh.c mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/mh.c
--- mipv6-daemon-umip-0.4-nepl-mcoa/src/mh.c	2008-03-21 16:40:07.000000000 +0100
+++ mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/mh.c	2008-03-20 17:11:24.000000000 +0100
@@ -479,6 +479,62 @@
 	return 0;
 }
 
+/* NEMO-SHO
+ * mh_create_opt_fid - Create a Flow Identifier Option
+ * TODO1: (TBA)
+ */
+int mh_create_opt_fid(struct iovec *iov, 
+		      uint8_t fid, uint8_t action, uint8_t status,
+		      uint8_t priority,
+		      uint8_t pro,
+		      int fid_subopt,
+		      uint8_t bid)
+{
+	int optlen = sizeof(struct ip6_mh_opt_fid) + 
+		(fid_subopt?sizeof(struct ip6_mh_opt_fid_subopt):0);
+	struct ip6_mh_opt_fid *opt_fid;
+	struct ip6_mh_opt_fid_subopt *opt_fid_subopt;
+	uint8_t *data;
+	
+	iov->iov_base = malloc(optlen);
+	iov->iov_len = optlen;
+
+	if (iov->iov_base == NULL)
+		return -ENOMEM;
+
+	memset(iov->iov_base, 0, iov->iov_len);
+	data = (uint8_t *)iov->iov_base;
+	
+	opt_fid = (struct ip6_mh_opt_fid *)data;
+
+#define IP6_OPT_FID_R 0x80
+#define IP6_OPT_FID_H 0x40
+
+	opt_fid->ip6fid_type = IP6_MHOPT_FID;
+	opt_fid->ip6fid_len = fid_subopt?9:6; // NEMO-SHO TODO: hard-coded
+	opt_fid->ip6fid_flags_high = 0;
+	opt_fid->ip6fid_flags_low = IP6_OPT_FID_H|priority; // TODO: priority should be masked
+	opt_fid->ip6fid_fid = fid;
+	opt_fid->ip6fid_action = action;
+	opt_fid->ip6fid_status = status;
+	opt_fid->ip6fid_pro_cls = (pro << 4) | 0x00;
+	data += sizeof(struct ip6_mh_opt_fid);
+
+	if (fid_subopt){
+		opt_fid_subopt = (struct ip6_mh_opt_fid_subopt *)data;
+		opt_fid_subopt->ip6fid_subopt_type = 1;
+		opt_fid_subopt->ip6fid_subopt_len  = 3;
+		opt_fid_subopt->ip6fid_subopt_bid  = bid;
+		data += sizeof(struct ip6_mh_opt_fid_subopt);
+	}
+
+	MDBG("FID sub-option created with FID = %d and action %d\n", 
+		fid, action);
+	
+	return 0;
+}
+/* NEMO-SHO */
+
 static size_t mh_length(struct iovec *vec, int count)
 {
 	size_t len = 0;
@@ -526,6 +582,11 @@
 		case IP6_MHOPT_BID:
 			pad = optpad(2, 0, len); /* 2n */
 			break;
+			/* NEMO-SHO */
+		case IP6_MHOPT_FID:
+			pad = optpad(2, 0, len); /* 2n */
+			break;
+			/* NEMO-SHO */
 		}
 		if (pad > 0) {
 			create_opt_pad(&out[n++], pad);
@@ -1027,6 +1088,7 @@
 		const struct timespec *lifetime, 
 		const uint16_t bid,
 		const uint8_t priority,
+		const struct ip6_mh_opt_fid *opt_fid, /* NEMO-SHO */
 		const uint8_t *key, int iif)
 {
 	int iovlen = 1;
@@ -1058,6 +1120,18 @@
 	/* MCoA: Create Binding Unique Identifier Option if needed */
 	if (bid) 
 		mh_create_opt_bid(&mh_vec[iovlen++], bid, priority, 0);
+
+	/* NEMO-SHO: FID option if needed & BA is accepted */
+	if (opt_fid && (status == IP6_MH_BAS_ACCEPTED))
+		mh_create_opt_fid(&mh_vec[iovlen++],
+				  opt_fid->ip6fid_fid, //fid
+				  opt_fid->ip6fid_action,  //action (n-casting)
+				  0,  //status
+				  0,  //priority
+				  opt_fid->ip6fid_pro_cls,  //process
+				  0,0);  //subopt is not present
+	/* NEMO-SHO */
+
 	mh_send(addrs, mh_vec, iovlen, key, iif);
 	free_iov_data(mh_vec, iovlen);
 }
diff -Nru mipv6-daemon-umip-0.4-nepl-mcoa/src/mh.h mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/mh.h
--- mipv6-daemon-umip-0.4-nepl-mcoa/src/mh.h	2008-03-21 16:40:07.000000000 +0100
+++ mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/mh.h	2008-03-21 16:27:24.000000000 +0100
@@ -10,7 +10,7 @@
 
 /* If new types or options appear, these should be updated. */
 #define IP6_MH_TYPE_MAX IP6_MH_TYPE_BERROR
-#define IP6_MHOPT_MAX IP6_MHOPT_BID
+#define IP6_MHOPT_MAX	IP6_MHOPT_FID /* NEMO-SHO */
 
 struct in6_addr_bundle {
 	struct in6_addr *src;
@@ -45,6 +45,7 @@
 		const struct timespec *lifetime,
 		const uint16_t bid,
 		const uint8_t priority,
+		const struct ip6_mh_opt_fid *opt_fid, /* NEMO-SHO */
 		const uint8_t *key, int iif);
 
 static inline void mh_send_ba_err(const struct in6_addr_bundle *addrs,
@@ -56,7 +57,7 @@
 {
 	struct timespec zero = { 0, 0 };
 	mh_send_ba(addrs, status, flags, seqno, &zero, 
-		   bid, priority, key, iif);
+		   bid, priority, NULL, key, iif); /* NEMO-SHO */
 }
 
 void mh_send_be(struct in6_addr *dst,
@@ -87,6 +88,14 @@
 
 int mh_create_opt_bid(struct iovec *iov, uint16_t bid, uint8_t priority, 
 		      uint8_t bid_flags);
+/* NEMO-SHO */
+int mh_create_opt_fid(struct iovec *iov, 
+		      uint8_t fid, uint8_t action, uint8_t status,
+		      uint8_t priority,
+		      uint8_t pro,
+		      int fid_subopt,
+		      uint8_t bid);
+/* NEMO-SHO */
 
 static inline void *mh_opt(const struct ip6_mh *mh,
 			   const struct mh_options *mh_opts, uint8_t type)
@@ -138,4 +147,13 @@
 void mh_handler_reg(uint8_t type, struct mh_handler *handler);
 void mh_handler_dereg(uint8_t type, struct mh_handler *handler);
 
+/* NEMO-SHO FlowBinding */
+#define FBIND_ADD_FLOW    0x00
+#define FBIND_REMOVE_FLOW 0xF0
+#define FBIND_ACTION_NCAST              0x03
+#define FBIND_ACTION_NCAST_COMBINE      0x04
+#define FBIND_ACTION_NCAST_COMBINE_ADAP 0x05
+#define FBIND_FID_SHO 0x08
+/* NEMO-SHO */
+
 #endif
diff -Nru mipv6-daemon-umip-0.4-nepl-mcoa/src/mn.c mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/mn.c
--- mipv6-daemon-umip-0.4-nepl-mcoa/src/mn.c	2008-03-21 16:40:07.000000000 +0100
+++ mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/mn.c	2008-03-31 16:15:06.000000000 +0200
@@ -67,6 +67,14 @@
 #include "dhaad_mn.h"
 #include "ipsec.h"
 
+/* NEMO-SHO CONFIG */
+uint16_t mcoa_get_previous_bid(struct home_addr_info *hai);
+enum {
+	TYPE_HO_DOWNWARD,
+	TYPE_HO_UPWARD
+};
+/* NEMO-SHO CONFIG*/
+
 #define MN_DEBUG_LEVEL 1
 
 #if MN_DEBUG_LEVEL >= 1
@@ -396,6 +404,49 @@
 			free_iov_data(iov, iov_ind);
 			return -ENOMEM;				
 		}
+		/* NEMO-SHO */
+		if (hai->reg_mcoa && bule->bid && bule->fid){
+			uint16_t prev_bid = 
+				mcoa_get_previous_bid(hai); 
+			uint8_t action;
+			if (conf.MnUseSHO){
+				if (conf.UseAdaptiveCombining)
+					action = FBIND_ACTION_NCAST_COMBINE_ADAP;
+				else
+					action = FBIND_ACTION_NCAST_COMBINE;
+			}
+			else
+				action = FBIND_ACTION_NCAST;
+			// Start N-casting
+			if ( bu->ip6mhbu_lifetime &&
+			     mh_create_opt_fid(&iov[iov_ind++],
+					       bule->fid, //fid
+					       action,
+					       0, //status
+					       0, //priority
+					       FBIND_ADD_FLOW, //process (adding)
+					       1, //subopt is present
+					       prev_bid //bid
+				     ) < 0 ){
+				free_iov_data(iov, iov_ind);
+				return -ENOMEM; 
+			}
+			// Stop N-casting
+			else if (!bule->mcoa_dereg &&
+				 mh_create_opt_fid(&iov[iov_ind++],
+						   bule->fid, //fid
+						   action,
+						   0,  //status
+						   0,  //priority
+						   0xF,//process (removing)
+						   0,  //subopt is not present
+						   0   //bid
+					 ) < 0){
+				free_iov_data(iov, iov_ind);
+				return -ENOMEM; 
+			}
+		}
+		/* NEMO-SHO */
 		if (bule->flags & IP6_MH_BU_MR && bu->ip6mhbu_lifetime &&
 		    bule->home->mnp_count > 0 && conf.MobRtrUseExplicitMode &&
 		    mh_create_opt_mob_net_prefix(&iov[iov_ind++],
@@ -452,6 +503,27 @@
 	
 	return ret;
 }
+/* NEMO-SHO */
+uint16_t mcoa_get_previous_bid(struct home_addr_info *hai)
+{
+	struct list_head *l;
+	int iif = hai->current_coa->iif;
+
+	if(!hai->reg_mcoa){
+		MDBG("================================= reg_mcoa is 0\n");
+		return 0;
+	}
+	
+	list_for_each(l, &hai->mcoa) {
+		struct mn_addr *coa_entry;
+		coa_entry = list_entry(l, struct mn_addr, list);
+		if (coa_entry->iif != iif) 
+			return get_bid_from_ifindex(coa_entry->iif);
+	}
+	MDBG("================================= cannot find entry\n");
+	return 0;
+}
+/* NEMO-SHO */
 
 struct mn_addr *mcoa_get_current_coa(struct home_addr_info *hai, int iif)
 {
@@ -1121,6 +1193,24 @@
 	}
 	if (!homereg_expired) {
 		bule->do_send_bu = 1;
+		/* NEMO-SHO */
+		if (conf.MnUseSHO){
+			struct bulentry *bul_prev = NULL;
+			uint16_t prev_bid = 
+				mcoa_get_previous_bid(hai); 
+			if (prev_bid)
+				bul_prev = bul_get(hai, NULL, 
+						   &hai->ha_addr,
+						   prev_bid);
+			
+			if (hai->reg_mcoa && bul_prev) {
+				MDBG("=====previous_bid %d=====\n", prev_bid);
+				bule->fid = FBIND_FID_SHO;
+			}
+			else 
+				bule->fid = 0;
+		}
+		/* NEMO-SHO */
 		mn_send_bu_msg(bule);
 		bul_update_timer(bule);		
 		if (conf.OptimisticHandoff)
@@ -1145,6 +1235,44 @@
 	bule->if_tunnel = tunnel_mod(bule->if_tunnel, &hai->current_coa->addr, 
 				     &hai->ha_addr, hai->current_coa->iif, 
 				     mn_ext_tunnel_ops, hai);
+	/* NEMO-SHO */
+	if (bule->fid){
+		int HOtype;
+		// only Packet Combining is enabled for this moement
+		int nemo_sho_flag = SHO_COMBINING;
+		if (conf.UseAdaptiveCombining)
+			nemo_sho_flag |=SHO_ADAPTIVE;
+		if (conf.debug_level > 0)
+			nemo_sho_flag |=SHO_DEBUG;
+
+		uint16_t prev_bid = 
+			mcoa_get_previous_bid(hai); 
+		struct bulentry *bul_prev = bul_get(hai, NULL, &hai->ha_addr,
+						    prev_bid);
+		// share the same fid with another bul
+		bul_prev->fid = bule->fid;
+
+		if (get_delay_from_bid(prev_bid) > 
+		    get_delay_from_bid(bule->bid) )
+			HOtype = TYPE_HO_DOWNWARD;
+		else 
+			HOtype = TYPE_HO_UPWARD;
+
+		dtunnel_mod_type(bule->if_tunnel, 
+				 &bule->coa,
+				 &bule->peer_addr,
+				 &bul_prev->coa,
+				 bule->if_coa,
+				 nemo_sho_flag,
+				 0,
+				 (HOtype==TYPE_HO_DOWNWARD)?
+				 get_delay_from_bid(bule->bid):0,
+				 (HOtype==TYPE_HO_DOWNWARD)?
+				 get_delay_from_bid(prev_bid):0
+				 ); /* from MR to HA */
+	}
+	/* NEMO-SHO */
+
 	hai->if_tunnel = bule->if_tunnel;		
 	bule->last_coa = bule->coa;
 	bule->coa_changed = 0;
@@ -1351,6 +1479,9 @@
 {
 	struct ip6_mh_binding_ack *ba;
 	struct ip6_mh_opt_bid *bui;
+	// NEMO-SHO
+	struct ip6_mh_opt_fid *fid_opt = NULL;
+	// NEMO-SHO
 	struct mh_options mh_opts;
 	struct bulentry *bule;
 	struct timespec now, ba_lifetime, br_adv;
@@ -1370,6 +1501,7 @@
 	/* MCoA: Lookup in BA options for the BUI sub-option and the BID */
 	bui = mh_opt(&ba->ip6mhba_hdr, &mh_opts, IP6_MHOPT_BID);
 	bid = bui ? ntohs(bui->ip6mobid_bid) : MCOA_NO_BID;
+	fid_opt = mh_opt(&ba->ip6mhba_hdr, &mh_opts, IP6_MHOPT_FID);
 	
 	bule = bul_get(NULL, in->dst, in->src, bid);
 	if (!bule || bule->type != BUL_ENTRY) {
@@ -1383,6 +1515,26 @@
 		     NIP6ADDR(in->local_coa != NULL ? 
 			      in->local_coa : &in6addr_any),
 		     bid);
+		if (fid_opt){
+			struct home_addr_info *hai = mn_get_home_addr(in->dst);
+			if (hai){
+				MDBG("FID option (FID=%d) is attached. releasing Bicasting/Combining info\n", fid_opt->ip6fid_fid);
+				bule = bul_get(hai, NULL, in->src, 
+						get_bid_from_ifindex(iif));
+				if (bule->fid == fid_opt->ip6fid_fid){
+					dtunnel_mod_type(bule->if_tunnel, 
+							 &bule->coa,
+							 &bule->peer_addr,
+							 0,
+							 0,
+							 0,
+							 0,
+							 0,
+							 0); /* from MR to HA */
+				}
+			}
+			hai = NULL;
+		}
 		pthread_rwlock_unlock(&mn_lock);
 		return;
 	}
@@ -1554,6 +1706,44 @@
 		dbg("Deleting bul entry\n");
 		bul_delete(bule);
 	}  else {
+		/* NEMO-SHO */
+		if (bule->fid){
+			int nemo_sho_flag = SHO_BICAST|SHO_COMBINING;
+			dbg("DTUNNEL from %x:%x:%x:%x:%x:%x:%x:%x "
+			    "with coa %x:%x:%x:%x:%x:%x:%x:%x\n",
+			    NIP6ADDR(in->src), NIP6ADDR(in->local_coa));
+
+			if (conf.UseAdaptiveCombining)
+				nemo_sho_flag |=SHO_ADAPTIVE;
+			if (conf.debug_level > 0)
+				nemo_sho_flag |=SHO_DEBUG;
+
+			struct home_addr_info *hai = bule->home;
+			uint16_t prev_bid = 
+				mcoa_get_previous_bid(hai); 
+			struct bulentry *bul_prev = bul_get(hai, NULL, 
+							    &hai->ha_addr,
+							    prev_bid);
+			int HOtype;
+			if (get_delay_from_bid(prev_bid) > 
+			    get_delay_from_bid(bule->bid) )
+				HOtype = TYPE_HO_DOWNWARD;
+			else 
+				HOtype = TYPE_HO_UPWARD;
+			dtunnel_mod_type(bule->if_tunnel, 
+					 &bule->coa,
+					 &bule->peer_addr,
+					 &bul_prev->coa,
+					 bule->if_coa,
+					 nemo_sho_flag,
+					 0,
+					 (HOtype==TYPE_HO_DOWNWARD)?
+					 get_delay_from_bid(bule->bid):0,
+					 (HOtype==TYPE_HO_DOWNWARD)?
+					 get_delay_from_bid(prev_bid):0
+				); /* from MR to HA */
+		}
+		/* NEMO-SHO */
 		set_bule_lifetime(bule, &ba_lifetime, &br_adv);
 		if (bule->flags & IP6_MH_BU_HOME) {
 			dbg("Callback to bu_refresh after %d seconds\n",
diff -Nru mipv6-daemon-umip-0.4-nepl-mcoa/src/movement.c mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/movement.c
--- mipv6-daemon-umip-0.4-nepl-mcoa/src/movement.c	2008-03-21 16:40:07.000000000 +0100
+++ mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/movement.c	2008-03-31 14:43:09.000000000 +0200
@@ -48,7 +48,7 @@
 #include "prefix.h"
 #include "conf.h"
 
-#define MD_DEBUG_LEVEL 1
+#define MD_DEBUG_LEVEL 0
 
 #if MD_DEBUG_LEVEL >= 1
 #define MDBG dbg
@@ -1411,10 +1411,13 @@
 	if (old)
 		md_expire_router(iface, old, new);
 
+	//NEMO-SHO avoid blocking outbound traffic here
+#if 0
 	if (list_empty(&iface->coas) &&
 	    !(iface->iface_flags & MD_BLOCK_TRAFFIC)) {
 		md_block_rule_add(iface);
 	}
+#endif
 	new->used = 1;
 	md_add_default_router(iface, new);
 	__md_new_link(iface, link_changed);
diff -Nru mipv6-daemon-umip-0.4-nepl-mcoa/src/policy.h mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/policy.h
--- mipv6-daemon-umip-0.4-nepl-mcoa/src/policy.h	2008-03-21 16:40:07.000000000 +0100
+++ mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/policy.h	2008-03-21 15:43:20.000000000 +0100
@@ -13,6 +13,7 @@
 #define POL_MN_IF_DEF_BID 0
 #define POL_MN_IF_DEF_BID_PRIORITY 0
 #define POL_MN_IF_DEF_RELIABLE 1
+#define POL_MN_IF_DEF_DELAY 0
 
 struct ip6_mh_binding_update;
 struct nd_router_advert;
diff -Nru mipv6-daemon-umip-0.4-nepl-mcoa/src/scan.l mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/scan.l
--- mipv6-daemon-umip-0.4-nepl-mcoa/src/scan.l	2008-03-21 16:40:07.000000000 +0100
+++ mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/scan.l	2008-03-21 15:34:55.000000000 +0100
@@ -139,11 +139,14 @@
 HaAcceptMobRtr   		{ return HAACCEPTMOBRTR; }
 HaAcceptMCoAReg			{ return HAACCEPTMCOAREG; }
 MCoAReg				{ return MCOAREG; }
+MnUseSHO			{ return MNUSESHO; }
+MnUseAdaptiveCombining		{ return MNUSEAPC; }
 NoMCoAReg			{ return NOMCOAREG; }
 IsMobRtr       			{ return ISMOBRTR; }
 Bid				{ return BID; }
 BidPriority			{ return BIDPRIORITY; }
 Reliable			{ return RELIABLE; }
+DefaultDelay			{ return DEFAULTDELAY; }
 RegMultipleCoA			{ return REGMULTIPLECOA; }
 IfMultipleCoA			{ return IFMULTIPLECOA; }
 HaServedPrefix       	       	{ return HASERVEDPREFIX; }
diff -Nru mipv6-daemon-umip-0.4-nepl-mcoa/src/tunnelctl.c mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/tunnelctl.c
--- mipv6-daemon-umip-0.4-nepl-mcoa/src/tunnelctl.c	2008-03-21 16:40:07.000000000 +0100
+++ mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/tunnelctl.c	2008-03-20 16:51:35.000000000 +0100
@@ -315,6 +315,73 @@
 	return res;
 }
 
+// ---------------- rueegg -------------------------
+int dtunnel_mod_type(int ifindex,
+		     struct in6_addr *local,
+		     struct in6_addr *remote,
+		     struct in6_addr *addr2,
+		     int link,
+		     int do_bicasting,
+		     int tnl_type,
+		     unsigned short defaultDeltaT1,
+		     unsigned short defaultDeltaT2)
+{
+	struct mip6_tnl *tnl;
+	struct ip6_tnl_parm parm;
+	struct ifreq ifr;
+		
+	int res = -1;
+
+	pthread_mutex_lock(&tnl_lock);
+
+	TDBG("modifying mode of tunnel %d end points with "
+	     "from %x:%x:%x:%x:%x:%x:%x:%x "
+	     "to %x:%x:%x:%x:%x:%x:%x:%x\n",
+	     ifindex, NIP6ADDR(local), NIP6ADDR(remote));
+
+	tnl = get_tnl(ifindex);
+	assert(tnl != NULL);
+
+	if (tnl->users == 1){
+		memset(&parm, 0, sizeof(struct ip6_tnl_parm));
+		parm.proto = IPPROTO_IPV6;
+		parm.flags = IP6_TNL_F_MIP6_DEV|IP6_TNL_F_IGN_ENCAP_LIMIT;
+		parm.hop_limit = 64;
+		parm.laddr = *local;
+		parm.raddr = *remote;
+		parm.link  = link;
+		parm.dparms.dtnl_flag = do_bicasting;  //rueegg
+		if (do_bicasting) {
+			parm.dparms.dtnl_type = tnl_type; //rueegg
+			parm.dparms.addr2 = *addr2; //rueegg
+		}
+		parm.dparms.defaultDeltaT[0]=defaultDeltaT1;
+		parm.dparms.defaultDeltaT[1]=defaultDeltaT2;
+		
+		strcpy(ifr.ifr_name, tnl->parm.name);
+		ifr.ifr_ifru.ifru_data = (void *)&parm;
+		
+		if(ioctl(tnl_fd, SIOCCHGTUNNEL, &ifr) < 0) {
+			TDBG("SIOCCHGTUNNEL failed status %d %s\n", 
+			     errno, strerror(errno));
+			pthread_mutex_unlock(&tnl_lock);
+			return -1;
+		}
+		memcpy(&tnl->parm, &parm, sizeof(struct ip6_tnl_parm));
+		TDBG("modified tunnel iface %s (%d)"
+		     "from %x:%x:%x:%x:%x:%x:%x:%x "
+		     "to %x:%x:%x:%x:%x:%x:%x:%x\n",
+		     tnl->parm.name, tnl->ifindex, NIP6ADDR(&tnl->parm.laddr),
+		     NIP6ADDR(&tnl->parm.raddr));
+		res = tnl->ifindex;
+	}
+		
+	pthread_mutex_unlock(&tnl_lock);
+	return res;
+}
+
+// ---------- rueegg end -------------------
+
 static int __tunnel_mod(struct mip6_tnl *tnl,
 			struct in6_addr *local,
 			struct in6_addr *remote,
diff -Nru mipv6-daemon-umip-0.4-nepl-mcoa/src/tunnelctl.h mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/tunnelctl.h
--- mipv6-daemon-umip-0.4-nepl-mcoa/src/tunnelctl.h	2007-09-13 11:42:42.000000000 +0200
+++ mipv6-daemon-umip-0.4-nepl-mcoa-sho/src/tunnelctl.h	2008-03-20 16:51:13.000000000 +0100
@@ -28,6 +28,21 @@
 				     void *data),
 	       void *data);
 
+/* NEMO-SHO by hirokazu */ 
+#define SHO_BICAST    0x1
+#define SHO_COMBINING 0x2
+#define SHO_ADAPTIVE  0x4
+#define SHO_DEBUG     0x8
+int dtunnel_mod_type(int ifindex,
+		     struct in6_addr *local,
+		     struct in6_addr *remote, 
+		     struct in6_addr *addr2, 
+		     int link,
+		     int do_bicasting,
+		     int tnl_type,
+		     unsigned short defaultDeltaT1,
+		     unsigned short defaultDeltaT2);
+/* NEMO-SHO by hirokazu */
 
 int tunnelctl_init(void);
 
