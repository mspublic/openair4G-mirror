package fr.eurecom.senml.entity;

import java.util.Iterator;
import java.util.List;

import javax.jdo.annotations.PersistenceCapable;
import javax.jdo.annotations.Persistent;
import javax.jdo.annotations.PrimaryKey;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.json.JSONObject;
import org.json.JSONArray;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import fr.eurecom.senml.persistence.JDOStorage;
import fr.eurecom.senml.persistence.JDOStorageZone;

@PersistenceCapable(detachable="true")
public class Sensor implements ISensor {
	
	@Persistent
	@PrimaryKey
	protected String uuid;

	@Persistent
	protected String title = null;

	@Persistent
	protected String zoneKey = null;
	
	@Persistent
	protected String baseUnit = null;

	@Persistent
	protected String type = null;
	
// Not supported. GAE load only lazy objects (empty objects) and does not support joins. 	
//	@Persistent(defaultFetchGroup="true")  
//	protected Set<Measure> measures;

	protected Sensor(String uuid, String title, String zoneKey) {
		this.uuid = uuid; 
		this.title = title.trim();
		this.zoneKey = zoneKey;
	}

	public Sensor(String uuid, String title, String zoneKey, String baseUnit, String type) {
		this.uuid = uuid; 
		this.title = title.trim();
		this.zoneKey = zoneKey;
		this.baseUnit = baseUnit;
		this.type = type;
	}

	@Override
	public String getUUID() {
		return uuid;
	}
	
	@Override
	public String zoneType() {
		return type;
	}

	@Override
	public String getTitle() {
		return title;
	}
	
	@Override
	public IZone getZone() {
		if (zoneKey != null) {
			return JDOStorage.getInstance().getById(zoneKey, ZoneAdmin.class);
		}
		return null;
	}
	
	@Override
	public String getBaseUnit() {
		return baseUnit;
	}

	@Override
	public JSONObject toJSONSenML() {
		JSONObject sensorSenML = new JSONObject();
		try {
			sensorSenML.put("bn", getBaseName());
			sensorSenML.put("type", zoneType());
			if (getBaseUnit() != null) {
				sensorSenML.put("bu", getBaseUnit());
			}
			
			JSONArray mArray = new JSONArray();
			for (Measure m : getMeasures()) {
				mArray.put(m.toJSONSenML());
			}
			if (mArray.length() > 0) {	
				sensorSenML.put("e", mArray);
			}
		}
		catch (Exception e) {
			e.printStackTrace();
		}
//	System.out.println(sensorSenML.toString());	
	return sensorSenML;	
	}
	
	@Override 
	public Document toXMLSenML() {
		try {
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			Document d = builder.newDocument();
			d.appendChild(toXMLSenML(d));
			return d;
		}
		catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public Element toXMLSenML(Document documentRoot) {
		try {	
			Element senml = documentRoot.createElement("senml");
			senml.setAttribute("bn", getBaseName());
			senml.setAttribute("type", zoneType());
			if (getBaseUnit() != null) {
				senml.setAttribute("bu", getBaseUnit());
			}
	
			for (Measure m : getMeasures()) {
				senml.appendChild(m.toXMLSenML(documentRoot));
			}
		return senml;	
		}
		catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("Title : " + title);
		builder.append("\"bn\" :").append(" (" + type).append(") \"uuid:" + uuid + "\" Measures ");
		builder.append("\r\n");
		for (Measure m : JDOStorageZone.getInstance().getMeasures(this)) {
			builder.append("\t").append(m.toString());
			builder.append("\r\n");
		}
	return builder.toString();	
	}

/*	@Override
	public List<String> getMeasuresPrint() {
		List<String> mString = new ArrayList<String>();
		
		for (String mKey : measuresKey) {
			Measure m = JDOStorage.getInstance().getById(mKey, Measure.class);
			mString.add(m.toPrettyString());
			}
		return mString;
	}
*/	
	
/*	@Override
	public List<String> getMeasuresKey() {
		return new ArrayList<String>(measuresKey);
	}
*/
 	
	@Override
	public List<Measure> getMeasures() {
		return JDOStorageZone.getInstance().getMeasures(this);
	}
	
/* HACK: "Generic Sensor" when the sensor has been created receiving a senml file (sensorin resource). 
	else sensor has been entered by the jsp file the uuid is generated by this program.
	this is a poor workaround to support both. in a future the jsp should disappears.
 */
	private final String getBaseName() {
		return uuid;
		//return "Generic Sensor".equals(title) ? uuid : String.format("urn:%s:uuid:%s", title.toLowerCase(), uuid);
	}
	
	public static Sensor getByUUID(String uuid) {
		List<Sensor> sensors = JDOStorage.getInstance().getAll(Sensor.class);
		Iterator<Sensor> iter = sensors.iterator();
		while (iter.hasNext()) {
			Sensor current = iter.next();
			if (current.getUUID().equals(uuid)) {
				return current;
			}
		}
		return null;
	}
}
